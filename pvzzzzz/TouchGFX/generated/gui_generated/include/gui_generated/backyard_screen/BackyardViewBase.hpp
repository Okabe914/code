/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef BACKYARDVIEWBASE_HPP
#define BACKYARDVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/backyard_screen/BackyardPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/containers/Slider.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <gui/containers/Plant.hpp>
#include <gui/containers/Car.hpp>
#include <gui/containers/Bullet.hpp>
#include <gui/containers/Zombie.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>
#include <touchgfx/widgets/ScalableImage.hpp>
#include <touchgfx/containers/ModalWindow.hpp>
#include <touchgfx/widgets/ButtonWithLabel.hpp>
#include <touchgfx/widgets/Button.hpp>
#include <touchgfx/widgets/TextArea.hpp>

class BackyardViewBase : public touchgfx::View<BackyardPresenter>
{
public:
    BackyardViewBase();
    virtual ~BackyardViewBase();
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void functionMove(int value)
    {
        // Override and implement this function in Backyard
    }
    virtual void funcChange()
    {
        // Override and implement this function in Backyard
    }
    virtual void funcBack()
    {
        // Override and implement this function in Backyard
    }
    virtual void funcRestart()
    {
        // Override and implement this function in Backyard
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Image map;
    touchgfx::Slider slider1;
    touchgfx::TextAreaWithOneWildcard text;
    Plant plant;
    Car car;
    Bullet bullet;
    Zombie zombie;
    touchgfx::ImageButtonStyle< touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  >  flexButton1;
    touchgfx::ScalableImage scalableImage2;
    touchgfx::ScalableImage scalableImage1;
    touchgfx::ScalableImage scalableImage3;
    touchgfx::Slider slider2;
    touchgfx::ImageButtonStyle< touchgfx::ClickButtonTrigger >  winButton;
    touchgfx::ModalWindow modalWindowgameover;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  flexButton2;
    touchgfx::ModalWindow modalWindowPause;
    touchgfx::ButtonWithLabel buttonBack;
    touchgfx::Button buttonBackMenu1;
    touchgfx::Image image1;
    touchgfx::ScalableImage scalableImage4;
    touchgfx::TextArea textContine;
    touchgfx::TextArea textBack;

    /*
     * Wildcard Buffers
     */
    static const uint16_t TEXT_SIZE = 10;
    touchgfx::Unicode::UnicodeChar textBuffer[TEXT_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<BackyardViewBase, const touchgfx::Slider&, int> sliderValueChangedCallback;
    touchgfx::Callback<BackyardViewBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;
    touchgfx::Callback<BackyardViewBase, const touchgfx::AbstractButton&> buttonCallback;

    /*
     * Callback Handler Declarations
     */
    void sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value);
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);

};

#endif // BACKYARDVIEWBASE_HPP
